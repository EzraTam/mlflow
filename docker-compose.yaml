version: '3.3'

services:
    db:
        restart: always
        image: postgres:latest
        container_name: mlflow_db
        expose:
            - ${DB_PORT}
        networks:
            - backend
        environment:
            - POSTGRES_DB=${DB_NAME}
            - POSTGRES_USER=${DB_USER}
            - POSTGRES_PASSWORD=${DB_PW}
        volumes:
            - ${DB_MNT_OUT_CONTAINER}:${DB_MNT_IN_CONTAINER}
        healthcheck:
          test: ["CMD", "pg_isready", "-p", "${DB_PORT}", "-U", "${DB_USER}"]
          interval: 5s
          timeout: 5s
          retries: 3

    minio:
      image: minio/minio
      ports:
        - "${MINIO_PORT}:9000"
        - "${MINIO_CONSOLE_PORT}:9001"
      volumes:
        - ${DB_MIN_IO_OUT_CONTAINER}:${DB_MIN_IO_IN_CONTAINER}
      networks:
        - frontend
        - backend
      environment:
        - MINIO_ROOT_USER=${MINIO_ROOT_USER}
        - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD}
        - MINIO_ADDRESS=${MINIO_ADDRESS}
        - MINIO_PORT=${MINIO_PORT}
        - MINIO_STORAGE_USE_HTTPS=${MINIO_STORAGE_USE_HTTPS}
        - MINIO_CONSOLE_ADDRESS=${MINIO_CONSOLE_ADDRESS}
      command: server ${DB_MIN_IO_IN_CONTAINER}
      healthcheck:
        test: timeout 5s bash -c ':> /dev/tcp/127.0.0.1/9000' || exit 1
        interval: 5s
        retries: 1
        start_period: 5s
        timeout: 5s

    tracking-server:
        restart: always
        build: ./mlflow
        image: mlflow_server
        container_name: mlflow_server
        expose:
          - 5000
        networks:
            - frontend
            - backend
        environment:
            - AWS_ACCESS_KEY_ID=${MINIO_ACCESS_KEY}
            - AWS_SECRET_ACCESS_KEY=${MINIO_SECRET_ACCESS_KEY}
            # Here minio comes from the service minio
            - MLFLOW_S3_ENDPOINT_URL=http://minio:${MINIO_PORT}
            - MLFLOW_S3_IGNORE_TLS=true

        command: >
          mlflow server
          --backend-store-uri postgresql://${DB_USER}:${DB_PW}@db:${DB_PORT}/${DB_NAME}
          --host 0.0.0.0
          --serve-artifacts
          --artifacts-destination s3://${MLFLOW_BUCKET_NAME}
        depends_on:
            - db
        healthcheck:
          test: ["CMD", "curl", "-f", "http://localhost:${MLFLOW_PORT}/"]
          interval: 30s
          timeout: 10s
          retries: 3

    nginx:
        restart: always
        build: ./nginx
        image: mlflow_nginx
        container_name: mlflow_nginx
        ports:
            - "${MLFLOW_PORT}:80"
        networks:
            - frontend
        depends_on:
            - tracking-server

networks:
    frontend:
        driver: bridge
    backend:
        driver: bridge